import numpy as np

def get_matrix_input(name):
    rows = int(input(f"Enter the number of rows for {name}: "))
    cols = int(input(f"Enter the number of columns for {name}: "))
    print(f"Enter the elements of {name} row-wise:")
    matrix = []
    for _ in range(rows):
        row = list(map(float, input().split()))
        matrix.append(row)
    return np.array(matrix)

def add_matrices(matrix1, matrix2):
    return np.add(matrix1, matrix2)

def subtract_matrices(matrix1, matrix2):
    return np.subtract(matrix1, matrix2)

def multiply_matrices(matrix1, matrix2):
    return np.matmul(matrix1, matrix2)

def transpose_matrix(matrix):
    return np.transpose(matrix)

def display_matrix(name, matrix):
    print(f"{name}:")
    print(matrix)

def main():
    matrix1 = get_matrix_input("Matrix 1")
    matrix2 = get_matrix_input("Matrix 2")
    
    print("\nChoose an operation:")
    print("1. Add")
    print("2. Subtract")
    print("3. Multiply")
    print("4. Transpose Matrix 1")
    print("5. Transpose Matrix 2")
    
    choice = int(input("Enter your choice (1-5): "))
    
    if choice == 1:
        if matrix1.shape == matrix2.shape:
            result = add_matrices(matrix1, matrix2)
            display_matrix("Matrix 1", matrix1)
            display_matrix("Matrix 2", matrix2)
            display_matrix("Result (Addition)", result)
        else:
            print("Error: Matrices must have the same dimensions for addition.")
    elif choice == 2:
        if matrix1.shape == matrix2.shape:
            result = subtract_matrices(matrix1, matrix2)
            display_matrix("Matrix 1", matrix1)
            display_matrix("Matrix 2", matrix2)
            display_matrix("Result (Subtraction)", result)
        else:
            print("Error: Matrices must have the same dimensions for subtraction.")
    elif choice == 3:
        if matrix1.shape[1] == matrix2.shape[0]:
            result = multiply_matrices(matrix1, matrix2)
            display_matrix("Matrix 1", matrix1)
            display_matrix("Matrix 2", matrix2)
            display_matrix("Result (Multiplication)", result)
        else:
            print("Error: Number of columns in Matrix 1 must equal number of rows in Matrix 2 for multiplication.")
    elif choice == 4:
        result = transpose_matrix(matrix1)
        display_matrix("Matrix 1", matrix1)
        display_matrix("Result (Transpose of Matrix 1)", result)
    elif choice == 5:
        result = transpose_matrix(matrix2)
        display_matrix("Matrix 2", matrix2)
        display_matrix("Result (Transpose of Matrix 2)", result)
    else:
        print("Invalid choice. Please enter a number between 1 and 5.")

if __name__ == "__main__":
    main()
